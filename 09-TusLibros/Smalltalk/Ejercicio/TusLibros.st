Object subclass: #Cart	instanceVariableNames: 'items catalog'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cart methodsFor: 'adding' stamp: 'Guerson 11/5/2017 13:22'!isEmpty	^ (self numberOfProducts) = 0 .! !!Cart methodsFor: 'adding' stamp: 'mg 11/5/2017 15:06'!summarize	| total |	total := 0 .	items keysAndValuesDo: [ :aBook :aQuantity | total := total + ((catalog at: aBook) * aQuantity) ] .	^ total . ! !!Cart methodsFor: 'adding' stamp: 'mg 11/5/2017 17:29'!withProductsAndQuantitiesDo: aClosure	items copy keysAndValuesDo: aClosure .! !!Cart methodsFor: 'adding' stamp: 'mg 11/5/2017 15:11'!contains: aBook	catalog at: aBook ifAbsent: [ ^ false ].	^ true .! !!Cart methodsFor: 'adding' stamp: 'mg 10/30/2017 18:15'!add: aBook quantity: aQuantity	(self contains: aBook) ifFalse: [ self error: Cart bookNotInCatalog ] .		items add: (Association key: aBook value: aQuantity ) .	! !!Cart methodsFor: 'adding' stamp: 'mg 10/30/2017 18:13'!initializeWith: aCatalog	catalog := aCatalog .	items := Dictionary new.! !!Cart methodsFor: 'adding' stamp: 'mg 10/30/2017 18:23'!numberOfProduct: aProduct	^ items at: aProduct  .! !!Cart methodsFor: 'adding' stamp: 'mg 10/26/2017 21:15'!numberOfProducts	| quantity |	quantity := 0 .	items valuesDo: [ :aBookQuantity | quantity := quantity + aBookQuantity ] .	^ quantity .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cart class	instanceVariableNames: ''!!Cart class methodsFor: 'instance creation' stamp: 'mg 10/26/2017 20:39'!bookNotInCatalog	^ 'El producto no está en el catálogo' .! !!Cart class methodsFor: 'instance creation' stamp: 'mg 10/26/2017 20:30'!withCatalog: aCatalog	^super new initializeWith: aCatalog  .! !Object subclass: #Cashier	instanceVariableNames: 'cart creditCard date salesBook merchantProcessor'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Cashier methodsFor: 'operations' stamp: 'mg 11/5/2017 16:03'!checkout	| transactionId aSale |	cart numberOfProducts = 0 ifTrue: [ ^ self error: Cashier cartIsEmpty  ].	(creditCard isExpiredAt: (Date current) ) ifTrue: [ ^ self error: Cashier creditCardIsOutdated ].	transactionId := merchantProcessor value: cart summarize value: creditCard .	aSale := Sale with: cart at: date transaction: transactionId.	salesBook add: aSale.	^ aSale .! !!Cashier methodsFor: 'initialization' stamp: 'mg 11/5/2017 14:58'!initializeFor: aCart debit: aCreditCard at: aDate registerOn: aSalesBook merchant: aMerchantProcessorClosure	cart := aCart .	creditCard :=aCreditCard .	date := aDate .	salesBook := aSalesBook .	merchantProcessor := aMerchantProcessorClosure .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cashier class	instanceVariableNames: ''!!Cashier class methodsFor: 'as yet unclassified' stamp: 'mg 10/30/2017 19:17'!creditCardIsOutdated	^ 'Credit card is outdated'.! !!Cashier class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 14:59'!charge: aCart debit: aCreditCard at: aDate registerOn: aSalesBook merchant: aMerchantProcessorClosure		^ (super new) initializeFor: aCart debit: aCreditCard at: aDate registerOn: aSalesBook merchant: aMerchantProcessorClosure . ! !!Cashier class methodsFor: 'as yet unclassified' stamp: 'mg 10/30/2017 18:47'!cartIsEmpty	^ 'Cart is empty'.! !Object subclass: #CreditCard	instanceVariableNames: 'validDate ccn number expirationDate'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!CreditCard methodsFor: 'initialization' stamp: 'Guerson 11/5/2017 13:08'!initializeWithNumber: aNumber validTo: anExpirationDate	number := aNumber .	expirationDate := anExpirationDate .! !!CreditCard methodsFor: 'initialization' stamp: 'Guerson 11/5/2017 13:21'!isExpiredAt: aDate	^ expirationDate < aDate .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CreditCard class	instanceVariableNames: ''!!CreditCard class methodsFor: 'as yet unclassified' stamp: 'Guerson 11/5/2017 13:09'!withNumber: aNumber validTo: anExpirationDate	^ super new initializeWithNumber: aNumber validTo: anExpirationDate .! !Object subclass: #Interface	instanceVariableNames: 'clients catalog carts'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Interface methodsFor: 'initialization' stamp: 'mg 11/5/2017 17:17'!initializeWwithClients: theClients catalog: aCatalog	clients := theClients .	catalog := aCatalog .	carts := Dictionary new .! !!Interface methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 17:30'!listProducts: aCartId	| aCart products |	aCart := carts at: aCartId ifAbsent: [ ^ self error: Interface inexistentCartError ] .	products := Dictionary new .	aCart withProductsAndQuantitiesDo: [ :aProduct :aQuantity | products add: (Association key: aProduct value: aQuantity ) ] .	^ products .	! !!Interface methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 17:19'!generateCartId	^ UUIDGenerator default next . ! !!Interface methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 17:17'!createCartFor: aUser password: aPassword	| aClientPassword aCart aCartId |	aClientPassword := clients at: aUser ifAbsent: [ ^ self error: Interface inexistentUserError ] .	aClientPassword = aPassword ifFalse: [ ^ self error: Interface wrongPasswordError ] .	aCart := Cart withCatalog: catalog .	aCartId := self generateCartId .	carts add: (Association key: aCartId value: aCart ) .	^ aCartId .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Interface class	instanceVariableNames: ''!!Interface class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 17:24'!inexistentCartError	^ 'Carrito inexistente' .! !!Interface class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 16:56'!wrongPasswordError	^ 'Contraseña errónea' .! !!Interface class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 17:11'!withClients: clients catalog: aCatalog	^ super new initializeWwithClients: clients catalog: aCatalog .! !!Interface class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 16:49'!inexistentUserError	^ 'Usuario inexistente' .! !Object subclass: #Sale	instanceVariableNames: 'cart transaction date'	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!Sale methodsFor: 'initialization' stamp: 'mg 11/5/2017 16:07'!initializeWith: aCart at: aDate transaction: aTransaction	cart := aCart.	date := aDate.	transaction := aTransaction.! !!Sale methodsFor: 'initialization' stamp: 'mg 11/5/2017 16:10'!date	^ date.! !!Sale methodsFor: 'initialization' stamp: 'mg 11/5/2017 16:10'!transaction	^ transaction .! !!Sale methodsFor: 'initialization' stamp: 'mg 11/5/2017 16:10'!cart	^ cart.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sale class	instanceVariableNames: ''!!Sale class methodsFor: 'as yet unclassified' stamp: 'mg 11/5/2017 16:06'!with: aCart at: aDate transaction: aTransaction	^ super new initializeWith: aCart at: aDate transaction: aTransaction . ! !TestCase subclass: #TusLibrosTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TusLibros'!!TusLibrosTests methodsFor: 'tests' stamp: 'Guerson 11/5/2017 13:10'!anOutdatedCreditCard	^ CreditCard withNumber: '5400 1234 5678 9999' validTo: Date yesterday.! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:10'!test02AddProductMakesNonEmptyCart	| aCart aBook aQuantity aCatalog aPrice |	aBook := #book123.	aPrice := 20 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCart := Cart withCatalog: aCatalog.	aQuantity := 2 .	aCart add: aBook quantity: aQuantity .		self deny: aCart numberOfProducts = 0.	self assert: aCart numberOfProducts equals: aQuantity .! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:17'!test07CannotCheckoutStolenCreditCard| aBook aCart aCatalog aCashier aCreditCard aSalesBook aQuantity aMerchantProcessor aPrice |		aBook := #book123.	aQuantity := 2 .	aPrice := 20 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCart := Cart withCatalog: aCatalog .	aCart add: aBook quantity: aQuantity .	aCreditCard :=  self aValidCreditCard .	aSalesBook := OrderedCollection new .	aMerchantProcessor := [ :anAmount :aCC | self error: self stolenCreditCardError ] .	aCashier := Cashier charge: aCart debit: aCreditCard at: (Date today) registerOn: aSalesBook merchant: aMerchantProcessor.	self
		should: [ aCashier checkout]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = self stolenCreditCardError .			self assert: aCart numberOfProducts = aQuantity . 			self assert: aSalesBook isEmpty . ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:19'!creditCardErrorWithoutFunds	^ 'Tarjeta de crédito sin fondos'! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 17:10'!test11InterfaceCantCreateCartForInexistentClient		| anInterface |	anInterface := Interface withClients: (Dictionary new) catalog: (Dictionary new) . 		self
		should: [ anInterface createCartFor: 'user' password: 'password' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface inexistentUserError ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:15'!test04addMultipleValidBooks	| aCart aBook otherBook aQuantity otherQuantity aCatalog aPrice otherPrice |		aBook := #book123.	otherBook := #book456.	aPrice := 20 .	otherPrice := 30 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCatalog add: (Association key: otherBook value: otherPrice ) .	aCart := Cart withCatalog: aCatalog .	aQuantity := 2 .	otherQuantity := 5.		aCart add: aBook quantity: aQuantity .	aCart add: otherBook  quantity: otherQuantity .		self assert: aCart numberOfProducts equals: (aQuantity + otherQuantity ) .	self assert: (aCart numberOfProduct: aBook) equals: aQuantity .	self assert: (aCart numberOfProduct: otherBook ) equals: otherQuantity  .! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:20'!test08CannotCheckoutWithACreditCardWithoutFunds| aBook aCart aCatalog aCashier aCreditCard aSalesBook aQuantity aMerchantProcessor aPrice |		aBook := #book123.	aQuantity := 2 .	aPrice := 20 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCart := Cart withCatalog: aCatalog .	aCart add: aBook quantity: aQuantity .	aCreditCard :=  self aValidCreditCard .	aSalesBook := OrderedCollection new .	aMerchantProcessor := [ :anAmount :aCC | self error: self creditCardErrorWithoutFunds ] .	aCashier := Cashier charge: aCart debit: aCreditCard at: (Date today) registerOn: aSalesBook merchant: aMerchantProcessor.	self
		should: [ aCashier checkout]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = self creditCardErrorWithoutFunds .			self assert: aCart numberOfProducts = aQuantity . 			self assert: aSalesBook isEmpty . ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 16:10'!test09CheckoutOneItemIsRegisteredCorrectly| aBook aCart aCatalog aCashier aCreditCard aSalesBook aQuantity aMerchantProcessor aPrice aSalesDate aSalesRegister |		aBook := #book123.	aQuantity := 2 .	aPrice := 20 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCart := Cart withCatalog: aCatalog .	aCart add: aBook quantity: aQuantity .	aCreditCard :=  self aValidCreditCard .	aSalesBook := OrderedCollection new .	aSalesDate := Date today.	aMerchantProcessor := [ :anAmount :aCC | ^ 123456 ] .		aCashier := Cashier charge: aCart debit: aCreditCard at: aSalesDate registerOn: aSalesBook merchant: aMerchantProcessor.	aSalesRegister := aCashier checkout.		self assert: (aSalesBook includes: aSalesRegister) .	self assert: aSalesRegister date equals: aSalesDate . 	self assert: aSalesRegister amount equals: (aCart summarize) . 	self assert: aSalesRegister transaction equals: 123456 . ! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 17:32'!test13InterfaceCreatesCartForAnExistentClient		| anInterface clients aClient aPassword aCartId |	clients := Dictionary new .	aClient := 'client1' .	aPassword := 'aPassword' .	clients add: (Association key: aClient value: aPassword ) .	anInterface := Interface withClients: clients catalog: Dictionary new . 		aCartId := anInterface createCartFor: aClient password: aPassword .	self assert: (anInterface listProducts: aCartId) isEmpty.! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 16:25'!test10CheckoutMoreThanOneItemIsRegisteredCorrectly| aBook aCart aCatalog aCashier aCreditCard aSalesBook aQuantity aMerchantProcessor aPrice aSalesDate aSalesRegister otherBook otherQuantity otherPrice |		aBook := #book123.	otherBook := #book456.	aQuantity := 2 .	aPrice := 20 .	otherQuantity := 6 .	otherPrice := 40 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCatalog add: (Association key: otherBook value: otherPrice ) .	aCart := Cart withCatalog: aCatalog .	aCart add: aBook quantity: aQuantity .	aCart add: otherBook quantity: otherQuantity .	aCreditCard :=  self aValidCreditCard .	aSalesBook := OrderedCollection new .	aSalesDate := Date today.	aMerchantProcessor := [ :anAmount :aCC | ^ 123456 ] .		aCashier := Cashier charge: aCart debit: aCreditCard at: aSalesDate registerOn: aSalesBook merchant: aMerchantProcessor.	aSalesRegister := aCashier checkout.		self assert: (aSalesBook includes: aSalesRegister) .	self assert: aSalesRegister date equals: aSalesDate . 	self assert: aSalesRegister amount equals: (aCart summarize) . 	self assert: aSalesRegister transaction equals: 123456 . ! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:07'!test01NewCartIsEmpty	| aCart aCatalog |	aCatalog := Dictionary new .	aCart := Cart withCatalog: aCatalog .		self assert: aCart isEmpty .! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 17:11'!test12InterfaceCantCreateCartForInvalidPassword		| anInterface clients |	clients := Dictionary new .	clients add: (Association key: 'client1' value: 'password1' ) .	anInterface := Interface withClients: clients catalog: Dictionary new .		self
		should: [ anInterface createCartFor: 'client1' password: 'wrongPassword' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Interface wrongPasswordError ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'Guerson 11/5/2017 13:09'!aValidCreditCard	^ CreditCard withNumber: '5400 1234 5678 9999' validTo: Date today.! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:13'!test03CannotAddProductThatIsNotFromThisEditorial	| aCart aBook aQuantity aCatalog |		aBook := #book123.	aCatalog := Dictionary new .	aCart := Cart withCatalog: aCatalog .	aQuantity := 2 .		self
		should: [ aCart add: aBook quantity: aQuantity ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart bookNotInCatalog ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:15'!test05CannotCheckoutEmptyCart	| aCart aCatalog aCashier aCreditCard aSalesBook |		aCatalog := Dictionary new .	aCart := Cart withCatalog: aCatalog .	aCreditCard :=  self aValidCreditCard.	aSalesBook := OrderedCollection new .	aCashier := Cashier charge: aCart debit: aCreditCard at: (Date today) registerOn: aSalesBook merchant: [  ] .		self
		should: [ aCashier checkout]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartIsEmpty .			self assert: aCart isEmpty . 			self assert: aSalesBook isEmpty . ]	! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 15:16'!test06CannotCheckoutOutdatedCreditCard| aBook aCart aCatalog aCashier aCreditCard aSalesBook aQuantity aPrice |		aBook := #book123.	aQuantity := 2 .	aPrice := 20 .	aCatalog := Dictionary new .	aCatalog add: (Association key: aBook value: aPrice ) .	aCart := Cart withCatalog: aCatalog .	aCart add: aBook quantity: aQuantity .	aCreditCard :=  self anOutdatedCreditCard .	aSalesBook := OrderedCollection new .	aCashier := Cashier charge: aCart debit: aCreditCard at: (Date today) registerOn: aSalesBook merchant: [  ] .		self
		should: [ aCashier checkout]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardIsOutdated .			self assert: aCart numberOfProducts = aQuantity . 			self assert: aSalesBook isEmpty . ]! !!TusLibrosTests methodsFor: 'tests' stamp: 'mg 11/5/2017 14:57'!stolenCreditCardError	^ 'Tarjeta de crédito robada'! !