Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'as yet unclassified' stamp: 'mg 11/22/2017 22:54'!isIdentifiedAs: anIdType numbered: anIdNumber 	^ identificationType  = anIdType and: [ identificationNumber = anIdNumber  ]! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/20/2017 19:57'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/22/2017 22:11'!testCanNotImportSupplierRecordWithMoreThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithMoreThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/22/2017 23:58'!assertSupplier1WasImportedCorrectly	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier  := system		supplierIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2		andNumberOfCustomers: 2.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires' .		self		assert: supplier		hasCustomerWithFirstName: 'Pepe'		lastName: 'Sanchez'		identifiedAs: 'D'		withNumber: '22333444'.	self		assert: supplier		hasCustomerWithFirstName: 'Juan'		lastName: 'Gonzalez'		identifiedAs: 'D'		withNumber: '5456774'.! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/22/2017 22:30'!assertImportedSuppliersSizeIsCorrect	self assert: system allSuppliersSize equals: 1! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/23/2017 02:33'!existentCustomerRecordWithLessThanThreeFieldsTestData		^ ReadStream on: 'S,Supplier1,D,123EC,D'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/23/2017 02:33'!existentCustomerRecordWithMoreThanThreeFieldsTestData		^ ReadStream on: 'S,Supplier1,D,123EC,D,124,x'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'mg 11/22/2017 22:11'!testCanNotImportSupplierRecordWithLessThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithLessThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'mg 11/22/2017 23:23'!assertImportedCustomersFromSuppliersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'mg 11/23/2017 00:01'!testImportSuppliers	self importCustomersFrom: self validTestDataCustomerForSupplierImport .	self importSuppliersFrom: self validTestDataSupplier .	self assertImportedSuppliersSizeIsCorrect.	self assertSupplier1WasImportedCorrectly.	self assertImportedCustomersFromSuppliersSizeIsCorrect.	self assertImportedCustomersFromSuppliersHaveBeenImportedCorrectly.! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'LeandroIannotti 11/16/2017 19:46'!alwaysImportedCustomer	^ system		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber		ifNone: [ self fail ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'mg 11/22/2017 22:15'!supplierRecordWithLessThanFourFieldsTestData		^ ReadStream on: 'S,Pepe,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'mg 11/22/2017 22:15'!supplierRecordWithMoreThanFourFieldsTestData		^ ReadStream on: 'S,Pepe,D,123,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'mg 11/22/2017 23:32'!assert: supplier isNamed: supplierName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize andNumberOfCustomers: customersSize	self assert: supplier name equals: supplierName .	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.	self assert: supplier numberOfAddresses equals: addressesSize .	self assert: supplier numberOfCustomers equals: customersSize .! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 02:24'!alwaysImportedSupplierIdNumber	^ '123'! !!CustomerImportTest methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 02:35'!alwaysImportedSupplierIdType	^ 'D'! !!CustomerImportTest methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 02:22'!alwaysImportedSupplier	^ system 		supplierIdentifiedAs: self alwaysImportedSupplierIdType  numbered: self alwaysImportedSupplierIdNumber ifNone: [ self fail ].! !!CustomerImportTest methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 02:22'!alwaysImportedSupplierType	^ 'D'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/22/2017 23:55'!assert: aSupplier hasCustomerWithFirstName: aFirstName lastName: aLastName identifiedAs: anIdType withNumber: anIdNumber	| customer |		customer := aSupplier customerWithIdType: anIdType withNumber: anIdNumber ifNone: [ self fail ].	self assert: customer firstName equals: aFirstName .	self assert: customer lastName equals: aLastName .	self assert: customer identificationType equals: anIdType .	self assert: customer identificationNumber equals: anIdNumber .	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/22/2017 22:30'!validTestDataCustomerForSupplierImport	^ ReadStream on: 'C,Juan,Gonzalez,D,5456774'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/22/2017 22:19'!testCanNotImportSupplierWithSupposedExistentCustomerThatNotExists	self importCustomersFrom: self validTestData.	self		should: [ self				importSuppliersFrom: self supplierRecordWithInvalidCustomersExistance ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerNotExistErrorDescription .]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 19:46'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/23/2017 02:30'!testCanNotImportExistentCustomerRecordWithMoreThanThreeFields	self		should: [ self				importSuppliersFrom: self existentCustomerRecordWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidExistentCustomerRecordErrorDescription.			self assert: system isCustomersEmpty.			self assert: self alwaysImportedSupplier customersIsEmpty  ]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/23/2017 02:46'!testCanNotImportSupplierWithSupposedNewCustomerThatExists	self importCustomersFrom: self validTestData.	self		should: [ self				importSuppliersFrom: self supplierRecordWithNoneCustomersExistance  ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerAlreadyExistsErrorDescription  .]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 19:53'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/23/2017 00:08'!assertImportedCustomersFromSuppliersHaveBeenImportedCorrectly	| customer idType idNumber |	idType := 'D' .	idNumber := '5456774'.	customer := system		customerIdentifiedAs: idType 		numbered: idNumber		ifNone: [ self fail ] .		self		assert: customer		isNamed: 'Juan'		lastName: 'Gonzalez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 0.		idType := 'D' .	idNumber := '22333444'.		customer := system		customerIdentifiedAs: idType 		numbered: idNumber		ifNone: [ self fail ] .		self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 0.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/22/2017 23:18'!validTestDataSupplier	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'mg 11/22/2017 23:31'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize 	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 19:46'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'tests' stamp: 'mg 11/23/2017 02:41'!testCanNotImportExistentCustomerRecordWithLessThanThreeFields	self		should: [ self				importSuppliersFrom: self existentCustomerRecordWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidExistentCustomerRecordErrorDescription.			self assert: system isCustomersEmpty.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!CustomerImportTest methodsFor: 'tests' stamp: 'mg 11/20/2017 19:57'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 15:05'!setUp	| currentEnvirnment |		currentEnvirnment := Environment current.	system := currentEnvirnment createErpSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 19:30'!tearDown	system commit.	system stop! !!CustomerImportTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/16/2017 19:48'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/16/2017 19:48'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/16/2017 19:48'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'LeandroIannotti 11/16/2017 19:48'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'importing' stamp: 'mg 11/22/2017 22:19'!supplierRecordWithInvalidCustomersExistance		^ ReadStream on: 'S,Supplier1,D,123 EC,D,22333445A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'importing' stamp: 'mg 11/20/2017 19:50'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream on: system) import! !!CustomerImportTest methodsFor: 'importing' stamp: 'LeandroIannotti 11/16/2017 20:12'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: system) import! !!CustomerImportTest methodsFor: 'importing' stamp: 'LeandroIannotti 11/16/2017 19:43'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: noneBlock! !!CustomerImportTest methodsFor: 'importing' stamp: 'mg 11/23/2017 02:49'!supplierRecordWithNoneCustomersExistance		^ ReadStream on: 'S,Supplier1,D,123 NC,Juan,Perez,D,22333444A,San Martin,3322,Olivos,1636,BsAs'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'initialization' stamp: 'LeandroIannotti 11/16/2017 20:09'!initializeOn: aReadStream on: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem.! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'LeandroIannotti 11/16/2017 20:22'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'LeandroIannotti 11/16/2017 20:00'!from: aReadStream on: aCustomeerSystem	^self new initializeOn: aReadStream on: aCustomeerSystem! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'mg 11/20/2017 20:23'!createErpSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'as yet unclassified' stamp: 'LeandroIannotti 11/16/2017 20:49'!current	^ self allSubclasses 		detect:[:anEnvironmentClass | anEnvironmentClass isCurrent]		ifFound:[:anEnvironmentClass | anEnvironmentClass new]		ifNone: [self error:'No environment found']	! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'mg 11/20/2017 20:27'!createErpSystem	^TransientErpSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'mg 11/23/2017 00:56'!isCurrent	^IntegrationEnvironment isCurrent not.! !Object subclass: #ErpSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ErpSystem methodsFor: 'importing' stamp: 'LeandroIannotti 11/16/2017 20:27'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock
	self subclassResponsibility! !!ErpSystem methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 20:27'!allCustomersSize
	self subclassResponsibility! !!ErpSystem methodsFor: 'importing - private - customer' stamp: 'LeandroIannotti 11/16/2017 20:27'!addCustomer: localNewCustomer
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:27'!stop
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:27'!beginTransaction
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:27'!start
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:27'!commit
	self subclassResponsibility! !!ErpSystem methodsFor: 'customers' stamp: 'LeandroIannotti 11/16/2017 20:27'!isCustomersEmpty
	self subclassResponsibility! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'mg 11/22/2017 15:09'!createErpSystem	^ (PersistentErpSystem new).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'mg 11/23/2017 02:53'!isCurrent	^true.! !ErpSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LeandroIannotti 11/16/2017 20:42'!isCustomersEmpty	^ (session selectAllOfType: Customer) isEmpty! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'LeandroIannotti 11/16/2017 20:25'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	^ customers size = 1		ifTrue: [ customers anyOne ]		ifFalse: noneBlock! !!PersistentCustomerSystem methodsFor: 'importing - private - customer' stamp: 'LeandroIannotti 11/16/2017 20:25'!addCustomer: localNewCustomer	session persist: localNewCustomer! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:25'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:25'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:25'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:25'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 19:18'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 19:17'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:25'!stop	session stop! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 19:24'!initialize	super initialize.	self initializeSession. ! !!PersistentCustomerSystem methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 20:42'!allCustomersSize	^ (session selectAllOfType: Customer) size! !ErpSystem subclass: #PersistentErpSystem	instanceVariableNames: 'persistentSupplierSystem persistentCustomerSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:34'!beginTransaction	persistentSupplierSystem beginTransaction .	persistentCustomerSystem beginTransaction .! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 15:37'!allCustomersSize	^ persistentCustomerSystem allCustomersSize .! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:47'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^ persistentCustomerSystem customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:45'!addCustomer: localNewCustomer	persistentCustomerSystem addCustomer: localNewCustomer ! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 23:35'!commit	persistentCustomerSystem commit .	persistentSupplierSystem commit .! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:46'!addressMappin	^ persistentCustomerSystem addressMapping.! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:33'!start	persistentSupplierSystem := PersistentSupplierSystem new.	persistentSupplierSystem start.	persistentCustomerSystem := PersistentCustomerSystem new.	persistentCustomerSystem start.! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/23/2017 02:40'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^ persistentSupplierSystem supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:47'!customerMapping	^ persistentCustomerSystem customerMapping! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:48'!isCustomersEmpty	^ persistentCustomerSystem isCustomersEmpty! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 23:36'!stop	persistentCustomerSystem stop .	persistentSupplierSystem stop .! !!PersistentErpSystem methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 01:09'!addSupplier: aSupplier 	persistentSupplierSystem addSupplier: aSupplier .! !!PersistentErpSystem methodsFor: 'testing' stamp: 'mg 11/23/2017 01:04'!isSuppliersEmpty	persistentSupplierSystem isSuppliersEmpty ! !ErpSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:27'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:27'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:04'!start	session open! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:32'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self supplierMapping)! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:27'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:32'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier 		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:27'!initialize	super initialize.	self initializeSession. ! !!PersistentSupplierSystem methodsFor: 'setup-teardown' stamp: 'Guerson 11/18/2017 20:27'!stop	session stop! !!PersistentSupplierSystem methodsFor: 'importing' stamp: 'Guerson 11/18/2017 20:30'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| suppliers |	suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.		^ suppliers size = 1		ifTrue: [ suppliers anyOne ]		ifFalse: noneBlock! !!PersistentSupplierSystem methodsFor: 'importing - private - customer' stamp: 'Guerson 11/18/2017 20:28'!addSupplier: localNewSupplier	session persist: localNewSupplier! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guerson 11/18/2017 20:33'!isSuppliersEmpty	^ (session selectAllOfType: Supplier) isEmpty! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guerson 11/18/2017 20:27'!isCustomersEmpty	^ (session selectAllOfType: Customer) isEmpty! !!PersistentSupplierSystem methodsFor: 'asserting' stamp: 'Guerson 11/18/2017 20:29'!allSuppliersSize	^ (session selectAllOfType: Supplier ) size! !Object subclass: #Supplier	instanceVariableNames: 'id identificationType identificationNumber addresses name customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'testing' stamp: 'mg 11/22/2017 23:19'!isIdentifiedAs: anIdType numbered: anIdNumber 	^(identificationType = anIdType) and: [ identificationNumber = anIdNumber ].! !!Supplier methodsFor: 'addresses' stamp: 'Guerson 11/18/2017 20:21'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'Guerson 11/18/2017 20:21'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses' stamp: 'mg 11/22/2017 22:22'!addCustomer: aCustomer 	customers add: aCustomer ! !!Supplier methodsFor: 'addresses' stamp: 'Guerson 11/18/2017 20:21'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'name' stamp: 'Guerson 11/18/2017 20:24'!name	^name ! !!Supplier methodsFor: 'name' stamp: 'Guerson 11/18/2017 20:24'!name: aName 	name := aName! !!Supplier methodsFor: 'identification' stamp: 'Guerson 11/18/2017 20:21'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'Guerson 11/18/2017 20:21'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'mg 11/22/2017 23:51'!customerWithIdType: anIdType withNumber: anIdNumber ifNone: noneClosure	^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdType numbered: anIdNumber ] ifFound: [:aCustomer | aCustomer] ifNone: noneClosure  ! !!Supplier methodsFor: 'identification' stamp: 'Guerson 11/18/2017 20:21'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'Guerson 11/18/2017 20:21'!identificationType		^identificationType ! !!Supplier methodsFor: 'initialization' stamp: 'Guerson 11/18/2017 20:25'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'as yet unclassified' stamp: 'Guerson 11/18/2017 20:21'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'mg 11/23/2017 02:37'!customersIsEmpty		^customers  isEmpty.! !!Supplier methodsFor: 'as yet unclassified' stamp: 'Guerson 11/18/2017 20:21'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'as yet unclassified' stamp: 'mg 11/22/2017 23:32'!numberOfCustomers	^customers size.! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record system newSupplier newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'initialization' stamp: 'Guerson 11/18/2017 20:49'!initializeOn: aReadStream on: aSupplierSystem	readStream := aReadStream.	system := aSupplierSystem.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/22/2017 23:24'!importCustomer	self assertValidCustomerRecordSize .	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	newSupplier addCustomer: newCustomer .	system addCustomer: newCustomer! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/22/2017 23:26'!verifyExistentCustomer	| existentCustomer |	self assertValidExistentCustomerRecordSize .	existentCustomer := system customerIdentifiedAs: record second numbered: record third ifNone: [ self signalCustomerNotExists ].	newSupplier addCustomer: existentCustomer .! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/22/2017 19:56'!importSupplier	self assertValidSupplierRecordSize.	newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth .	system addSupplier: newSupplier! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/23/2017 00:52'!isNewCustomerRecord: aNewCustomerClosure ifExists: anExistsClosure ifNeither: aNeitherClosure  	self isNewCustomerRecord ifTrue: [ 		^ aNewCustomerClosure value .	].		self isExistingCustomerRecord ifTrue: [ 		^ anExistsClosure value .	].	^aNeitherClosure value . ! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/23/2017 00:41'!isCustomerRecord	"^ self isNewCustomerRecord or: (self isExistingCustomerRecord) ."	self isNewCustomerRecord ifTrue: [ 		^self verifyExistentCustomerInSystemWithIdType: record fourth andNumber: record fifth 			ifExists: [ ^self signalCustomerAlreadyExists ] 			ifNotExists: [ ^self importCustomer ]	].		self isExistingCustomerRecord ifTrue: [ 		self assertValidExistentCustomerRecordSize .		^self verifyExistentCustomerInSystemWithIdType: record second andNumber: record third 			ifExists: [ :aCustomer | ^newSupplier addCustomer: aCustomer ] 			ifNotExists: [ ^self signalCustomerNotExists ]	].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/23/2017 02:26'!assertValidExistentCustomerRecordSize		record size ~= 3 ifTrue: [ ^ self signalInvalidExistentCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'Guerson 11/18/2017 20:50'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/20/2017 20:05'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'Guerson 11/18/2017 20:49'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/22/2017 19:35'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'Guerson 11/18/2017 20:50'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'mg 11/23/2017 00:22'!verifyExistentCustomerInSystemWithIdType: anIdType andNumber: anIdNumber ifExists: existsClosure ifNotExists: notExistsClosure 	| customer |	customer := system customerIdentifiedAs: anIdType numbered: anIdNumber ifNone: notExistsClosure .	^ existsClosure value: customer .! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guerson 11/18/2017 20:42'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guerson 11/18/2017 20:42'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'mg 11/23/2017 02:51'!importRecord		self isNewCustomerRecord: [ 		self verifyExistentCustomerInSystemWithIdType: record fourth andNumber: record fifth 			ifExists: [ :aCustomer | ^self signalCustomerAlreadyExists ] 			ifNotExists: [ ^self importCustomer ]	] 	ifExists: [ 		self assertValidExistentCustomerRecordSize .		self verifyExistentCustomerInSystemWithIdType: record second andNumber: record third 			ifExists: [ :aCustomer | ^newSupplier addCustomer: aCustomer ] 			ifNotExists: [ ^self signalCustomerNotExists ]	]	ifNeither: [  		self isAddressRecord ifTrue: [ ^self importAddress ].		self isSupplierRecord ifTrue: [ ^self importSupplier ].			self signalInvalidRecordType	]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guerson 11/18/2017 20:42'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'error signal' stamp: 'mg 11/23/2017 00:36'!signalCustomerAlreadyExists 		self error: self class invalidCustomerAlreadyExistsErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'mg 11/22/2017 19:34'!signalInvalidExistentCustomerRecord 		self error: self class invalidExistentCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'mg 11/22/2017 19:36'!signalCustomerNotExists 		self error: self class invalidCustomerNotExistErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'mg 11/20/2017 20:05'!signalInvalidSupplierRecord		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guerson 11/18/2017 20:42'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guerson 11/18/2017 20:42'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guerson 11/18/2017 20:42'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'importing' stamp: 'Guerson 11/18/2017 20:42'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guerson 11/18/2017 20:46'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guerson 11/18/2017 20:42'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'mg 11/20/2017 19:59'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription.	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guerson 11/18/2017 20:50'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guerson 11/18/2017 20:42'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'Guerson 11/18/2017 20:43'!from: aReadStream on: aSupplierSystem	^self new initializeOn: aReadStream on: aSupplierSystem! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guerson 11/18/2017 20:54'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'mg 11/22/2017 21:45'!invalidExistentCustomerRecordErrorDescription	^'Invalid existent customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'mg 11/23/2017 00:36'!invalidCustomerAlreadyExistsErrorDescription	^'Customer already exists'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guerson 11/18/2017 20:43'!invalidSupplierRecordErrorDescription		^'Invalid supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guerson 11/18/2017 20:42'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guerson 11/18/2017 20:42'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guerson 11/18/2017 20:42'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'mg 11/22/2017 19:48'!invalidCustomerNotExistErrorDescription	^'Invalid existent customer record'! !ErpSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'asserting' stamp: 'LeandroIannotti 11/16/2017 20:40'!allCustomersSize	^customers size! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'LeandroIannotti 11/16/2017 20:39'!isCustomersEmpty	^customers isEmpty.! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:31'!beginTransaction! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:39'!commit! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:30'!start	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:39'!stop! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'LeandroIannotti 11/16/2017 20:33'!addCustomer:newCustomer	 customers add:newCustomer ! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'mg 11/22/2017 22:54'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure	^customers detect: [ :aCustomer | aCustomer isIdentifiedAs:anIdentificationType numbered:anIdentificationNumber  ] ifFound: [:aCustomer | aCustomer] ifNone: noneClosure  	! !ErpSystem subclass: #TransientErpSystem	instanceVariableNames: 'transientSupplierSystem transientCustomerSystem'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:37'!beginTransaction	transientSupplierSystem beginTransaction.	transientCustomerSystem beginTransaction.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:04'!allCustomersSize	^transientCustomerSystem allCustomersSize .! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:55'!customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure	^ transientCustomerSystem customerIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:36'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure	^ transientSupplierSystem  supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:50'!commit! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:38'!addCustomer:newCustomer		transientCustomerSystem addCustomer:newCustomer.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:34'!start	transientSupplierSystem := TransientSupplierSystem new.	transientSupplierSystem start .	transientCustomerSystem := TransientCustomerSystem new .	transientCustomerSystem start.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:21'!addSupplier: newSupplier		transientSupplierSystem addSupplier: newSupplier .! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 14:04'!isCustomersEmpty	^ transientCustomerSystem isCustomersEmpty.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:33'!allSuppliersSize	^transientSupplierSystem  allSuppliersSize .! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:50'!stop! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 19:38'!isSuppliersEmpty	^ transientSupplierSystem  isSuppliersEmpty.! !ErpSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:36'!beginTransaction! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:22'!addSupplier: newSupplier	suppliers add: newSupplier.! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 18:33'!allSuppliersSize	^suppliers size.! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:35'!start	suppliers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 23:05'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ifNone: noneClosure	| supplier |	suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs:anIdentificationType numbered:anIdentificationNumber  ] ifFound: [:aSupplier | supplier := aSupplier] ifNone: [ ^noneClosure value].	^supplier .! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/20/2017 20:36'!stop! !!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'mg 11/22/2017 19:38'!isSuppliersEmpty	^suppliers isEmpty.! !